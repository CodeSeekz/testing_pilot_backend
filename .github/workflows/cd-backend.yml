# my-frontend-repo/.github/workflows/cd-frontend.yml
name: CD Frontend Deployment # MODIFIED

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  # Define the FRONTEND image name. MUST match docker-compose.yml. Use lowercase.
  IMAGE_NAME: ${{ secrets.GHCR_USERNAME || github.repository_owner }}/${{ secrets.FRONTEND_IMAGE_REPO_NAME || github.event.repository.name }} # MODIFIED (FRONTEND secret)
  # Deployment path is the same for both
  DEPLOY_PATH_ON_SERVER: /home/${{ secrets.SSH_USER }}/testing-pilot

jobs:
  build-push-deploy:
    name: Build, Push Docker Image and Deploy Frontend # MODIFIED
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # MODIFIED Step Name and potentially context/file if Dockerfile isn't in root
      - name: Build and Push Frontend Image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Deployment script remains identical, as it updates the whole stack
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # port: 22
          script: |
            echo "Connecting to server..."
            cd ${{ env.DEPLOY_PATH_ON_SERVER }}
            echo "Current directory: $(pwd)"

            # Optional: Login to registry on the server
            # echo "Logging into Docker registry on server..."
            # echo "${{ secrets.DEPLOY_PAT_OR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo "Pulling latest images for all services..."
            docker compose pull backend frontend

            echo "Restarting services with latest images..."
            docker compose up -d --force-recreate --remove-orphans backend frontend

            echo "Cleaning up old Docker images..."
            docker image prune -af || true

            echo "Frontend deployment script finished." # MODIFIED log message
